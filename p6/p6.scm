; p6.scm
; A prototype for program 6 in scheme
;
; Program 6
; CS-320-01-Fall-2021
; @date 12/1/21
; @author Dominic Griffith
;
; Edit this file to add your documentation and function definitions.
; Leave the rest of this file unchanged.
; To run this file, you would start scheme at edoras command line prompt:
; scheme --load p6.scm, where the file is in the current directory
; and then in scheme type the load command (from the '%' prompt):
;(load "p6.scm")
;
; Defined LISTS for use with testing your functions.

#lang scheme 

(define list0 (list 'j 'k 'l 'm 'n 'o 'j) )
(define list1 (list 'a 'b 'c 'd 'e 'f 'g) )
(define list2 (list 's 't 'u 'v 'w 'x 'y 'z) )
(define list3 (list 'j 'k 'l 'm 'l 'k 'j) )
(define list4 (list 'n 'o 'p 'q 'q 'p 'o 'n) )
(define list5 '((a b) c (d e d) c (a b)) )
(define list6 '((h i) (j k) l (m n)) ) 
(define list7 '(f (a b) c (d e d) (b a) f) )
(define list8 '())
(define atm0 10)

;
; Here is a typical function definition from Sebesta Ch. 15
(define (adder lis)
  (cond
    ((null? lis) 0)
	(else (+ (car lis) (adder (cdr lis))))
))
; The above five lines are the sort of definition you would need to add to
; this file if asked to define an ADDER function.
; Uncomment and complete the following five definitions. At least have ODDS
; so the program can be tested.


; (define (odds ...
; returns a list containing the odd indexed elements of the passed list
(define (odds lis)
  (cond
    ( (not (list? lis)) (display "USAGE: (odds {list})")(newline))
    ( (null? lis) '())
    ( (null? (cdr lis)) (append (list (car lis)) '()))
  (else
     (append (list (car lis)) (odds (cddr lis))))
))


; (define (evenrev ...
; returns a list containing the even indexed elements of the passed list reversed
(define (evenrev lis)
  (revList (evens lis)))

(define (evens lis)
  (cond
    ( (not (list? lis)) (display "USAGE: (evenrev {list})")(newline))
    ( (null? lis) '())
    ( (null? (cdr lis)) '());check to see if cdr doesnt exist when list is single element
    (else
       ;(cons (car (cdr lis)) (evens (cddr lis)))))) ;car of the cdr (car(cdr lis)) is cadr
       (append (list (car (cdr lis))) (evens (cddr lis))))))

(define (revList lis)
  (cond
    ( (not (list? lis))(display "USAGE: (evenrev {list})")(newline))
    ( (null? lis) '())
  (else
    (append (revList(cdr lis)) (list(car lis))))
))



; (define (penultimate ...
; return the second last element of the list
(define (penultimate lis)
  (cond
    ( (not (list? lis)) (display "USAGE: (penultimate {list})")(newline))
    ( (null? lis) '())
    ( (null? (cdr lis)) '())
    ( (null? (cddr lis)) (list (car lis)))
  (else
    (penultimate (cdr lis)))))


; (define (palindrome ...
; return #t if the list is palindrome
(define (palindrome lis)
  (cond 
     ( (not (list? lis)) (display "USAGE: (palindrome {list})")(newline))
     ( (null? lis) #t)
     ( (= (length lis) 1) #t)
     ( (equal? (car lis) (car (revList lis)))
       (palindrome  (cdr (revList (cdr lis)))))
   (else #f)))
      
     

; (define (change-head ...
; returns the list generated by replacing the first element of the first list with the first element of the second list
(define (change-head lis1 lis2)
  (cond
    ( (or (not (list? lis1))
               (not (list? lis2))
                     (null? lis1)
                           (null? lis2))
          (display "USAGE: (change-head {list} {list})") (newline))  
    (else
      (append (list (car lis2)) (cdr lis1)))
))


;;; TEST ;;;

;(change-head list0 list1) ; aklmnoj
;(change-head '(a) '(b)) ;b
;(change-head '() '(b)) ;cdr of empty doesnt exist so usage
;(change-head '(a) '())
;(change-head 'a 'b) ;anything not true is false so it runs else statement (THERE IS FALSE AND THEN EVERYTHING ELSE IS TRUE)
;(change-head '(a b c) 'b)
                   ;; (change-head '(a b)) ;let happen
;(change-head '(a b) '(c d))
;(evens list0)
;(evens list1)
;(change-head list1 list2)
;(change-head '(a b c) '(d e f))
;(change-head '(a) '(b))
;(change-head '(a) '())
;(palindrome '(s t u v w x y z)) 
;(palindrome (list 'j 'k 'l 'm 'l 'k 'j))
;(palindrome '())
;(palindrome '(a))
;(palindrome list0)
;(palindrome list4)
;(penultimate list7)
;(palindrome '((a b) c (d e d) c (b a)) )
;(palindromeT '((a b) c (d e d) c (b a)) )
;(palindromeT '(c) )
;(palindromeT list5)
